{"remainingRequest":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js??ref--9-3!/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/tracker/tracker.service.ts","dependencies":[{"path":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/tracker/tracker.service.ts","mtime":1576592214536},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYSwgX2IsIF9jLCBfZDsKaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInOwppbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7CmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJzsKaW1wb3J0IHsgQ1NSRlNlcnZpY2UgfSBmcm9tICcuLi9hdXRoL2NzcmYuc2VydmljZSc7CmltcG9ydCB7IEF1dGhTZXJ2ZXJQcm92aWRlciB9IGZyb20gJy4uL2F1dGgvYXV0aC1qd3Quc2VydmljZSc7CmltcG9ydCAqIGFzIFNvY2tKUyBmcm9tICdzb2NranMtY2xpZW50JzsKaW1wb3J0ICogYXMgU3RvbXAgZnJvbSAnd2Vic3RvbXAtY2xpZW50JzsKbGV0IEpoaVRyYWNrZXJTZXJ2aWNlID0gY2xhc3MgSmhpVHJhY2tlclNlcnZpY2UgewogICAgY29uc3RydWN0b3Iocm91dGVyLCBhdXRoU2VydmVyUHJvdmlkZXIsIGxvY2F0aW9uLCBjc3JmU2VydmljZSkgewogICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyOwogICAgICAgIHRoaXMuYXV0aFNlcnZlclByb3ZpZGVyID0gYXV0aFNlcnZlclByb3ZpZGVyOwogICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjsKICAgICAgICB0aGlzLmNzcmZTZXJ2aWNlID0gY3NyZlNlcnZpY2U7CiAgICAgICAgdGhpcy5zdG9tcENsaWVudCA9IG51bGw7CiAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gbnVsbDsKICAgICAgICB0aGlzLmFscmVhZHlDb25uZWN0ZWRPbmNlID0gZmFsc2U7CiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gdGhpcy5jcmVhdGVDb25uZWN0aW9uKCk7CiAgICAgICAgdGhpcy5saXN0ZW5lciA9IHRoaXMuY3JlYXRlTGlzdGVuZXIoKTsKICAgIH0KICAgIGNvbm5lY3QoKSB7CiAgICAgICAgaWYgKHRoaXMuY29ubmVjdGVkUHJvbWlzZSA9PT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSB0aGlzLmNyZWF0ZUNvbm5lY3Rpb24oKTsKICAgICAgICB9CiAgICAgICAgLy8gYnVpbGRpbmcgYWJzb2x1dGUgcGF0aCBzbyB0aGF0IHdlYnNvY2tldCBkb2Vzbid0IGZhaWwgd2hlbiBkZXBsb3lpbmcgd2l0aCBhIGNvbnRleHQgcGF0aAogICAgICAgIGxldCB1cmwgPSAnL3dlYnNvY2tldC90cmFja2VyJzsKICAgICAgICB1cmwgPSB0aGlzLmxvY2F0aW9uLnByZXBhcmVFeHRlcm5hbFVybCh1cmwpOwogICAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IHRoaXMuYXV0aFNlcnZlclByb3ZpZGVyLmdldFRva2VuKCk7CiAgICAgICAgaWYgKGF1dGhUb2tlbikgewogICAgICAgICAgICB1cmwgKz0gJz9hY2Nlc3NfdG9rZW49JyArIGF1dGhUb2tlbjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgc29ja2V0ID0gbmV3IFNvY2tKUyh1cmwpOwogICAgICAgIHRoaXMuc3RvbXBDbGllbnQgPSBTdG9tcC5vdmVyKHNvY2tldCk7CiAgICAgICAgY29uc3QgaGVhZGVycyA9IHt9OwogICAgICAgIHRoaXMuc3RvbXBDbGllbnQuY29ubmVjdChoZWFkZXJzLCAoKSA9PiB7CiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkUHJvbWlzZSgnc3VjY2VzcycpOwogICAgICAgICAgICB0aGlzLmNvbm5lY3RlZFByb21pc2UgPSBudWxsOwogICAgICAgICAgICB0aGlzLnNlbmRBY3Rpdml0eSgpOwogICAgICAgICAgICBpZiAoIXRoaXMuYWxyZWFkeUNvbm5lY3RlZE9uY2UpIHsKICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShldmVudCA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRBY3Rpdml0eSgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5hbHJlYWR5Q29ubmVjdGVkT25jZSA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIGRpc2Nvbm5lY3QoKSB7CiAgICAgICAgaWYgKHRoaXMuc3RvbXBDbGllbnQgIT09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5zdG9tcENsaWVudC5kaXNjb25uZWN0KCk7CiAgICAgICAgICAgIHRoaXMuc3RvbXBDbGllbnQgPSBudWxsOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHsKICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsKICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsOwogICAgICAgIH0KICAgICAgICB0aGlzLmFscmVhZHlDb25uZWN0ZWRPbmNlID0gZmFsc2U7CiAgICB9CiAgICByZWNlaXZlKCkgewogICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyOwogICAgfQogICAgc2VuZEFjdGl2aXR5KCkgewogICAgICAgIGlmICh0aGlzLnN0b21wQ2xpZW50ICE9PSBudWxsICYmIHRoaXMuc3RvbXBDbGllbnQuY29ubmVjdGVkKSB7CiAgICAgICAgICAgIHRoaXMuc3RvbXBDbGllbnQuc2VuZCgnL3RvcGljL2FjdGl2aXR5JywgLy8gZGVzdGluYXRpb24KICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyBwYWdlOiB0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdC51cmwgfSksIC8vIGJvZHkKICAgICAgICAgICAge30gLy8gaGVhZGVyCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfQogICAgc3Vic2NyaWJlKCkgewogICAgICAgIHRoaXMuY29ubmVjdGlvbi50aGVuKCgpID0+IHsKICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gdGhpcy5zdG9tcENsaWVudC5zdWJzY3JpYmUoJy90b3BpYy90cmFja2VyJywgZGF0YSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVyT2JzZXJ2ZXIubmV4dChKU09OLnBhcnNlKGRhdGEuYm9keSkpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0KICAgIHVuc3Vic2NyaWJlKCkgewogICAgICAgIGlmICh0aGlzLnN1YnNjcmliZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7CiAgICAgICAgfQogICAgICAgIHRoaXMubGlzdGVuZXIgPSB0aGlzLmNyZWF0ZUxpc3RlbmVyKCk7CiAgICB9CiAgICBjcmVhdGVMaXN0ZW5lcigpIHsKICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4gewogICAgICAgICAgICB0aGlzLmxpc3RlbmVyT2JzZXJ2ZXIgPSBvYnNlcnZlcjsKICAgICAgICB9KTsKICAgIH0KICAgIGNyZWF0ZUNvbm5lY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gKHRoaXMuY29ubmVjdGVkUHJvbWlzZSA9IHJlc29sdmUpKTsKICAgIH0KfTsKSmhpVHJhY2tlclNlcnZpY2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoWwogICAgSW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KSwKICAgIHRzbGliXzEuX19tZXRhZGF0YSgiZGVzaWduOnBhcmFtdHlwZXMiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBSb3V0ZXIgIT09ICJ1bmRlZmluZWQiICYmIFJvdXRlcikgPT09ICJmdW5jdGlvbiIgPyBfYSA6IE9iamVjdCwgdHlwZW9mIChfYiA9IHR5cGVvZiBBdXRoU2VydmVyUHJvdmlkZXIgIT09ICJ1bmRlZmluZWQiICYmIEF1dGhTZXJ2ZXJQcm92aWRlcikgPT09ICJmdW5jdGlvbiIgPyBfYiA6IE9iamVjdCwgdHlwZW9mIChfYyA9IHR5cGVvZiBMb2NhdGlvbiAhPT0gInVuZGVmaW5lZCIgJiYgTG9jYXRpb24pID09PSAiZnVuY3Rpb24iID8gX2MgOiBPYmplY3QsIHR5cGVvZiAoX2QgPSB0eXBlb2YgQ1NSRlNlcnZpY2UgIT09ICJ1bmRlZmluZWQiICYmIENTUkZTZXJ2aWNlKSA9PT0gImZ1bmN0aW9uIiA/IF9kIDogT2JqZWN0XSkKXSwgSmhpVHJhY2tlclNlcnZpY2UpOwpleHBvcnQgeyBKaGlUcmFja2VyU2VydmljZSB9Owo="},{"version":3,"file":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/tracker/tracker.service.ts","sourceRoot":"","sources":["/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/tracker/tracker.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { Observable, Observer, Subscription } from 'rxjs';\nimport { Location } from '@angular/common';\n\nimport { CSRFService } from '../auth/csrf.service';\nimport { AuthServerProvider } from '../auth/auth-jwt.service';\n\nimport * as SockJS from 'sockjs-client';\nimport * as Stomp from 'webstomp-client';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiTrackerService {\n  stompClient = null;\n  subscriber = null;\n  connection: Promise<any>;\n  connectedPromise: any;\n  listener: Observable<any>;\n  listenerObserver: Observer<any>;\n  alreadyConnectedOnce = false;\n  private subscription: Subscription;\n\n  constructor(\n    private router: Router,\n    private authServerProvider: AuthServerProvider,\n    private location: Location,\n    private csrfService: CSRFService\n  ) {\n    this.connection = this.createConnection();\n    this.listener = this.createListener();\n  }\n\n  connect() {\n    if (this.connectedPromise === null) {\n      this.connection = this.createConnection();\n    }\n    // building absolute path so that websocket doesn't fail when deploying with a context path\n    let url = '/websocket/tracker';\n    url = this.location.prepareExternalUrl(url);\n    const authToken = this.authServerProvider.getToken();\n    if (authToken) {\n      url += '?access_token=' + authToken;\n    }\n    const socket = new SockJS(url);\n    this.stompClient = Stomp.over(socket);\n    const headers = {};\n    this.stompClient.connect(headers, () => {\n      this.connectedPromise('success');\n      this.connectedPromise = null;\n      this.sendActivity();\n      if (!this.alreadyConnectedOnce) {\n        this.subscription = this.router.events.subscribe(event => {\n          if (event instanceof NavigationEnd) {\n            this.sendActivity();\n          }\n        });\n        this.alreadyConnectedOnce = true;\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient !== null) {\n      this.stompClient.disconnect();\n      this.stompClient = null;\n    }\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n    this.alreadyConnectedOnce = false;\n  }\n\n  receive() {\n    return this.listener;\n  }\n\n  sendActivity() {\n    if (this.stompClient !== null && this.stompClient.connected) {\n      this.stompClient.send(\n        '/topic/activity', // destination\n        JSON.stringify({ page: this.router.routerState.snapshot.url }), // body\n        {} // header\n      );\n    }\n  }\n\n  subscribe() {\n    this.connection.then(() => {\n      this.subscriber = this.stompClient.subscribe('/topic/tracker', data => {\n        this.listenerObserver.next(JSON.parse(data.body));\n      });\n    });\n  }\n\n  unsubscribe() {\n    if (this.subscriber !== null) {\n      this.subscriber.unsubscribe();\n    }\n    this.listener = this.createListener();\n  }\n\n  private createListener(): Observable<any> {\n    return new Observable(observer => {\n      this.listenerObserver = observer;\n    });\n  }\n\n  private createConnection(): Promise<any> {\n    return new Promise(resolve => (this.connectedPromise = resolve));\n  }\n}\n"]}]}