{"remainingRequest":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js??ref--9-3!/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","dependencies":[{"path":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","mtime":1576592215247},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYSwgX2IsIF9jOwppbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7CmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7CmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBMb2NhbFN0b3JhZ2VTZXJ2aWNlLCBTZXNzaW9uU3RvcmFnZVNlcnZpY2UgfSBmcm9tICduZ3gtd2Vic3RvcmFnZSc7CmltcG9ydCB7IFNFUlZFUl9BUElfVVJMIH0gZnJvbSAnYXBwL2FwcC5jb25zdGFudHMnOwpsZXQgQXV0aFNlcnZlclByb3ZpZGVyID0gY2xhc3MgQXV0aFNlcnZlclByb3ZpZGVyIHsKICAgIGNvbnN0cnVjdG9yKGh0dHAsICRsb2NhbFN0b3JhZ2UsICRzZXNzaW9uU3RvcmFnZSkgewogICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7CiAgICAgICAgdGhpcy4kbG9jYWxTdG9yYWdlID0gJGxvY2FsU3RvcmFnZTsKICAgICAgICB0aGlzLiRzZXNzaW9uU3RvcmFnZSA9ICRzZXNzaW9uU3RvcmFnZTsKICAgIH0KICAgIGdldFRva2VuKCkgewogICAgICAgIHJldHVybiB0aGlzLiRsb2NhbFN0b3JhZ2UucmV0cmlldmUoJ2F1dGhlbnRpY2F0aW9uVG9rZW4nKSB8fCB0aGlzLiRzZXNzaW9uU3RvcmFnZS5yZXRyaWV2ZSgnYXV0aGVudGljYXRpb25Ub2tlbicpOwogICAgfQogICAgbG9naW4oY3JlZGVudGlhbHMpIHsKICAgICAgICBjb25zdCBkYXRhID0gewogICAgICAgICAgICB1c2VybmFtZTogY3JlZGVudGlhbHMudXNlcm5hbWUsCiAgICAgICAgICAgIHBhc3N3b3JkOiBjcmVkZW50aWFscy5wYXNzd29yZCwKICAgICAgICAgICAgcmVtZW1iZXJNZTogY3JlZGVudGlhbHMucmVtZW1iZXJNZQogICAgICAgIH07CiAgICAgICAgZnVuY3Rpb24gYXV0aGVudGljYXRlU3VjY2VzcyhyZXNwKSB7CiAgICAgICAgICAgIGNvbnN0IGJlYXJlclRva2VuID0gcmVzcC5oZWFkZXJzLmdldCgnQXV0aG9yaXphdGlvbicpOwogICAgICAgICAgICBpZiAoYmVhcmVyVG9rZW4gJiYgYmVhcmVyVG9rZW4uc2xpY2UoMCwgNykgPT09ICdCZWFyZXIgJykgewogICAgICAgICAgICAgICAgY29uc3Qgand0ID0gYmVhcmVyVG9rZW4uc2xpY2UoNywgYmVhcmVyVG9rZW4ubGVuZ3RoKTsKICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVBdXRoZW50aWNhdGlvblRva2VuKGp3dCwgY3JlZGVudGlhbHMucmVtZW1iZXJNZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gand0OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChTRVJWRVJfQVBJX1VSTCArICdhcGkvYXV0aGVudGljYXRlJywgZGF0YSwgeyBvYnNlcnZlOiAncmVzcG9uc2UnIH0pLnBpcGUobWFwKGF1dGhlbnRpY2F0ZVN1Y2Nlc3MuYmluZCh0aGlzKSkpOwogICAgfQogICAgc3RvcmVBdXRoZW50aWNhdGlvblRva2VuKGp3dCwgcmVtZW1iZXJNZSkgewogICAgICAgIGlmIChyZW1lbWJlck1lKSB7CiAgICAgICAgICAgIHRoaXMuJGxvY2FsU3RvcmFnZS5zdG9yZSgnYXV0aGVudGljYXRpb25Ub2tlbicsIGp3dCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICB0aGlzLiRzZXNzaW9uU3RvcmFnZS5zdG9yZSgnYXV0aGVudGljYXRpb25Ub2tlbicsIGp3dCk7CiAgICAgICAgfQogICAgfQogICAgbG9nb3V0KCkgewogICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7CiAgICAgICAgICAgIHRoaXMuJGxvY2FsU3RvcmFnZS5jbGVhcignYXV0aGVudGljYXRpb25Ub2tlbicpOwogICAgICAgICAgICB0aGlzLiRzZXNzaW9uU3RvcmFnZS5jbGVhcignYXV0aGVudGljYXRpb25Ub2tlbicpOwogICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpOwogICAgICAgIH0pOwogICAgfQp9OwpBdXRoU2VydmVyUHJvdmlkZXIgPSB0c2xpYl8xLl9fZGVjb3JhdGUoWwogICAgSW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KSwKICAgIHRzbGliXzEuX19tZXRhZGF0YSgiZGVzaWduOnBhcmFtdHlwZXMiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBIdHRwQ2xpZW50ICE9PSAidW5kZWZpbmVkIiAmJiBIdHRwQ2xpZW50KSA9PT0gImZ1bmN0aW9uIiA/IF9hIDogT2JqZWN0LCB0eXBlb2YgKF9iID0gdHlwZW9mIExvY2FsU3RvcmFnZVNlcnZpY2UgIT09ICJ1bmRlZmluZWQiICYmIExvY2FsU3RvcmFnZVNlcnZpY2UpID09PSAiZnVuY3Rpb24iID8gX2IgOiBPYmplY3QsIHR5cGVvZiAoX2MgPSB0eXBlb2YgU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlICE9PSAidW5kZWZpbmVkIiAmJiBTZXNzaW9uU3RvcmFnZVNlcnZpY2UpID09PSAiZnVuY3Rpb24iID8gX2MgOiBPYmplY3RdKQpdLCBBdXRoU2VydmVyUHJvdmlkZXIpOwpleHBvcnQgeyBBdXRoU2VydmVyUHJvdmlkZXIgfTsK"},{"version":3,"file":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts","sourceRoot":"","sources":["/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/auth/auth-jwt.service.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAC;AAE5E,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAGnD,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,YAAoB,IAAgB,EAAU,aAAkC,EAAU,eAAsC;QAA5G,SAAI,GAAJ,IAAI,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAqB;QAAU,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAEpI,QAAQ;QACN,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;IACpH,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,GAAG;YACX,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,UAAU,EAAE,WAAW,CAAC,UAAU;SACnC,CAAC;QAEF,SAAS,mBAAmB,CAAC,IAAI;YAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACtD,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE;gBACxD,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBACrD,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC3D,OAAO,GAAG,CAAC;aACZ;QACH,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,kBAAkB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtI,CAAC;IAED,wBAAwB,CAAC,GAAG,EAAE,UAAU;QACtC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;SACtD;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;SACxD;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAChD,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAClD,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAzCY,kBAAkB;IAD9B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAEP,UAAU,oBAAV,UAAU,oDAAyB,mBAAmB,oBAAnB,mBAAmB,oDAA2B,qBAAqB,oBAArB,qBAAqB;GADrH,kBAAkB,CAyC9B;SAzCY,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n\nimport { SERVER_API_URL } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthServerProvider {\n  constructor(private http: HttpClient, private $localStorage: LocalStorageService, private $sessionStorage: SessionStorageService) {}\n\n  getToken() {\n    return this.$localStorage.retrieve('authenticationToken') || this.$sessionStorage.retrieve('authenticationToken');\n  }\n\n  login(credentials): Observable<any> {\n    const data = {\n      username: credentials.username,\n      password: credentials.password,\n      rememberMe: credentials.rememberMe\n    };\n\n    function authenticateSuccess(resp) {\n      const bearerToken = resp.headers.get('Authorization');\n      if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\n        const jwt = bearerToken.slice(7, bearerToken.length);\n        this.storeAuthenticationToken(jwt, credentials.rememberMe);\n        return jwt;\n      }\n    }\n\n    return this.http.post(SERVER_API_URL + 'api/authenticate', data, { observe: 'response' }).pipe(map(authenticateSuccess.bind(this)));\n  }\n\n  storeAuthenticationToken(jwt, rememberMe) {\n    if (rememberMe) {\n      this.$localStorage.store('authenticationToken', jwt);\n    } else {\n      this.$sessionStorage.store('authenticationToken', jwt);\n    }\n  }\n\n  logout(): Observable<any> {\n    return new Observable(observer => {\n      this.$localStorage.clear('authenticationToken');\n      this.$sessionStorage.clear('authenticationToken');\n      observer.complete();\n    });\n  }\n}\n"]}]}