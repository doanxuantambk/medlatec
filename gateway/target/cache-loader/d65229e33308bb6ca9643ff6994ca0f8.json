{"remainingRequest":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js??ref--9-3!/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/login/login.service.ts","dependencies":[{"path":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/login/login.service.ts","mtime":1576592214760},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYSwgX2I7CmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJzsKaW1wb3J0IHsgZmxhdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJzsKaW1wb3J0IHsgQWNjb3VudFNlcnZpY2UgfSBmcm9tICdhcHAvY29yZS9hdXRoL2FjY291bnQuc2VydmljZSc7CmltcG9ydCB7IEF1dGhTZXJ2ZXJQcm92aWRlciB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvYXV0aC1qd3Quc2VydmljZSc7CmxldCBMb2dpblNlcnZpY2UgPSBjbGFzcyBMb2dpblNlcnZpY2UgewogICAgY29uc3RydWN0b3IoYWNjb3VudFNlcnZpY2UsIGF1dGhTZXJ2ZXJQcm92aWRlcikgewogICAgICAgIHRoaXMuYWNjb3VudFNlcnZpY2UgPSBhY2NvdW50U2VydmljZTsKICAgICAgICB0aGlzLmF1dGhTZXJ2ZXJQcm92aWRlciA9IGF1dGhTZXJ2ZXJQcm92aWRlcjsKICAgIH0KICAgIGxvZ2luKGNyZWRlbnRpYWxzKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZlclByb3ZpZGVyLmxvZ2luKGNyZWRlbnRpYWxzKS5waXBlKGZsYXRNYXAoKCkgPT4gdGhpcy5hY2NvdW50U2VydmljZS5pZGVudGl0eSh0cnVlKSkpOwogICAgfQogICAgbG9nb3V0KCkgewogICAgICAgIHRoaXMuYXV0aFNlcnZlclByb3ZpZGVyLmxvZ291dCgpLnN1YnNjcmliZShudWxsLCBudWxsLCAoKSA9PiB0aGlzLmFjY291bnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShudWxsKSk7CiAgICB9Cn07CkxvZ2luU2VydmljZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbCiAgICBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pLAogICAgdHNsaWJfMS5fX21ldGFkYXRhKCJkZXNpZ246cGFyYW10eXBlcyIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIEFjY291bnRTZXJ2aWNlICE9PSAidW5kZWZpbmVkIiAmJiBBY2NvdW50U2VydmljZSkgPT09ICJmdW5jdGlvbiIgPyBfYSA6IE9iamVjdCwgdHlwZW9mIChfYiA9IHR5cGVvZiBBdXRoU2VydmVyUHJvdmlkZXIgIT09ICJ1bmRlZmluZWQiICYmIEF1dGhTZXJ2ZXJQcm92aWRlcikgPT09ICJmdW5jdGlvbiIgPyBfYiA6IE9iamVjdF0pCl0sIExvZ2luU2VydmljZSk7CmV4cG9ydCB7IExvZ2luU2VydmljZSB9Owo="},{"version":3,"file":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/login/login.service.ts","sourceRoot":"","sources":["/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/core/login/login.service.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAC;AAGpE,IAAa,YAAY,GAAzB,MAAa,YAAY;IACvB,YAAoB,cAA8B,EAAU,kBAAsC;QAA9E,mBAAc,GAAd,cAAc,CAAgB;QAAU,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAG,CAAC;IAEtG,KAAK,CAAC,WAAW;QACf,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5G,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACvG,CAAC;CACF,CAAA;AAVY,YAAY;IADxB,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAEG,cAAc,oBAAd,cAAc,oDAA8B,kBAAkB,oBAAlB,kBAAkB;GADvF,YAAY,CAUxB;SAVY,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\nimport { flatMap } from 'rxjs/operators';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { AuthServerProvider } from 'app/core/auth/auth-jwt.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  constructor(private accountService: AccountService, private authServerProvider: AuthServerProvider) {}\n\n  login(credentials) {\n    return this.authServerProvider.login(credentials).pipe(flatMap(() => this.accountService.identity(true)));\n  }\n\n  logout() {\n    this.authServerProvider.logout().subscribe(null, null, () => this.accountService.authenticate(null));\n  }\n}\n"]}]}