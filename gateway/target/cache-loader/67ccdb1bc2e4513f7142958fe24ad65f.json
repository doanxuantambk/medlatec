{"remainingRequest":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js??ref--9-3!/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts","dependencies":[{"path":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts","mtime":1576592213422},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYSwgX2IsIF9jLCBfZDsKaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJzsKaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInOwppbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICdhcHAvY29yZS9sb2dpbi9sb2dpbi5zZXJ2aWNlJzsKaW1wb3J0IHsgTG9naW5Nb2RhbFNlcnZpY2UgfSBmcm9tICdhcHAvY29yZS9sb2dpbi9sb2dpbi1tb2RhbC5zZXJ2aWNlJzsKaW1wb3J0IHsgU3RhdGVTdG9yYWdlU2VydmljZSB9IGZyb20gJ2FwcC9jb3JlL2F1dGgvc3RhdGUtc3RvcmFnZS5zZXJ2aWNlJzsKbGV0IEF1dGhFeHBpcmVkSW50ZXJjZXB0b3IgPSBjbGFzcyBBdXRoRXhwaXJlZEludGVyY2VwdG9yIHsKICAgIGNvbnN0cnVjdG9yKGxvZ2luU2VydmljZSwgbG9naW5Nb2RhbFNlcnZpY2UsIHN0YXRlU3RvcmFnZVNlcnZpY2UsIHJvdXRlcikgewogICAgICAgIHRoaXMubG9naW5TZXJ2aWNlID0gbG9naW5TZXJ2aWNlOwogICAgICAgIHRoaXMubG9naW5Nb2RhbFNlcnZpY2UgPSBsb2dpbk1vZGFsU2VydmljZTsKICAgICAgICB0aGlzLnN0YXRlU3RvcmFnZVNlcnZpY2UgPSBzdGF0ZVN0b3JhZ2VTZXJ2aWNlOwogICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyOwogICAgfQogICAgaW50ZXJjZXB0KHJlcXVlc3QsIG5leHQpIHsKICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCkucGlwZSh0YXAobnVsbCwgKGVycikgPT4gewogICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSA0MDEgJiYgZXJyLnVybCAmJiAhZXJyLnVybC5pbmNsdWRlcygnYXBpL2FjY291bnQnKSkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVTdG9yYWdlU2VydmljZS5zdG9yZVVybCh0aGlzLnJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdC51cmwpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubG9naW5TZXJ2aWNlLmxvZ291dCgpOwogICAgICAgICAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnJ10pOwogICAgICAgICAgICAgICAgICAgIHRoaXMubG9naW5Nb2RhbFNlcnZpY2Uub3BlbigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSkpOwogICAgfQp9OwpBdXRoRXhwaXJlZEludGVyY2VwdG9yID0gdHNsaWJfMS5fX2RlY29yYXRlKFsKICAgIEluamVjdGFibGUoKSwKICAgIHRzbGliXzEuX19tZXRhZGF0YSgiZGVzaWduOnBhcmFtdHlwZXMiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBMb2dpblNlcnZpY2UgIT09ICJ1bmRlZmluZWQiICYmIExvZ2luU2VydmljZSkgPT09ICJmdW5jdGlvbiIgPyBfYSA6IE9iamVjdCwgdHlwZW9mIChfYiA9IHR5cGVvZiBMb2dpbk1vZGFsU2VydmljZSAhPT0gInVuZGVmaW5lZCIgJiYgTG9naW5Nb2RhbFNlcnZpY2UpID09PSAiZnVuY3Rpb24iID8gX2IgOiBPYmplY3QsIHR5cGVvZiAoX2MgPSB0eXBlb2YgU3RhdGVTdG9yYWdlU2VydmljZSAhPT0gInVuZGVmaW5lZCIgJiYgU3RhdGVTdG9yYWdlU2VydmljZSkgPT09ICJmdW5jdGlvbiIgPyBfYyA6IE9iamVjdCwgdHlwZW9mIChfZCA9IHR5cGVvZiBSb3V0ZXIgIT09ICJ1bmRlZmluZWQiICYmIFJvdXRlcikgPT09ICJmdW5jdGlvbiIgPyBfZCA6IE9iamVjdF0pCl0sIEF1dGhFeHBpcmVkSW50ZXJjZXB0b3IpOwpleHBvcnQgeyBBdXRoRXhwaXJlZEludGVyY2VwdG9yIH07Cg=="},{"version":3,"file":"/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts","sourceRoot":"","sources":["/Users/tamdx/github/medlatec/gateway/node_modules/eslint-loader/dist/cjs.js!/Users/tamdx/github/medlatec/gateway/src/main/webapp/app/blocks/interceptor/auth-expired.interceptor.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAwD,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAE/G,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEzC,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AACvE,OAAO,EAAE,mBAAmB,EAAE,MAAM,qCAAqC,CAAC;AAG1E,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IACjC,YACU,YAA0B,EAC1B,iBAAoC,EACpC,mBAAwC,EACxC,MAAc;QAHd,iBAAY,GAAZ,YAAY,CAAc;QAC1B,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,WAAM,GAAN,MAAM,CAAQ;IACrB,CAAC;IAEJ,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,GAAG,CAAC,IAAI,EAAE,CAAC,GAAQ,EAAE,EAAE;YACrB,IAAI,GAAG,YAAY,iBAAiB,EAAE;gBACpC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;oBACrE,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBACxE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;oBAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;iBAC/B;aACF;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF,CAAA;AAtBY,sBAAsB;IADlC,UAAU,EAAE;iEAGa,YAAY,oBAAZ,YAAY,oDACP,iBAAiB,oBAAjB,iBAAiB,oDACf,mBAAmB,oBAAnB,mBAAmB,oDAChC,MAAM,oBAAN,MAAM;GALb,sBAAsB,CAsBlC;SAtBY,sBAAsB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { LoginService } from 'app/core/login/login.service';\nimport { LoginModalService } from 'app/core/login/login-modal.service';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\n\n@Injectable()\nexport class AuthExpiredInterceptor implements HttpInterceptor {\n  constructor(\n    private loginService: LoginService,\n    private loginModalService: LoginModalService,\n    private stateStorageService: StateStorageService,\n    private router: Router\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap(null, (err: any) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401 && err.url && !err.url.includes('api/account')) {\n            this.stateStorageService.storeUrl(this.router.routerState.snapshot.url);\n            this.loginService.logout();\n            this.router.navigate(['']);\n            this.loginModalService.open();\n          }\n        }\n      })\n    );\n  }\n}\n"]}]}